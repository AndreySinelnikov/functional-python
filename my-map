def my_map(function, sequence):   
    """Генератор, выдающий по принципу отложенного
       вычисления результаты применения функции
       поочерёдно к элементам последовательности.
       Стандартная пайтоновская функция map немного
       навороченней (может принимать несколько последовательностей),
       но общая идея такая же."""    
    for elem in sequence:
        yield function(elem)

def pantsify(value):
    return f"{value} у тебя в штанах"

my_list = ["дед", "бабка", "мышка", 1, "небо", "аллах"]
my_str = "жаба"

# простой вызов my_map возвращает объект-генератор
print(my_map(pantsify, my_list))
print()

# но передав такой вызов в list, мы получим из него список
print(list(my_map(pantsify, my_list)))
print()

# работает с любым итерируемым объектом (iterable), вот кортеж из строки
print(tuple(my_map(pantsify, my_str)))
print()

# простую одноразовую функцию типа pantsify не обязательно именовать
ded_gen = my_map(lambda word: f"Твой дед {word}", ["Джавдет", "Шнопачок"])

# на третьем вызове __next__() выбрасывается исключение
# причина: у генератора закончились значения
print(ded_gen.__next__())
print(ded_gen.__next__())
print(ded_gen.__next__())
